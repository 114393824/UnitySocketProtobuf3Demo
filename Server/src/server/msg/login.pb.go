// Code generated by protoc-gen-go.
// source: login.proto
// DO NOT EDIT!

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LoginFaild_ErrorCode int32

const (
	LoginFaild_AccountOrPasswardNotMatch LoginFaild_ErrorCode = 0
	LoginFaild_AccIDInvalid              LoginFaild_ErrorCode = 1
	LoginFaild_LoginRepeat               LoginFaild_ErrorCode = 2
)

var LoginFaild_ErrorCode_name = map[int32]string{
	0: "AccountOrPasswardNotMatch",
	1: "AccIDInvalid",
	2: "LoginRepeat",
}
var LoginFaild_ErrorCode_value = map[string]int32{
	"AccountOrPasswardNotMatch": 0,
	"AccIDInvalid":              1,
	"LoginRepeat":               2,
}

func (x LoginFaild_ErrorCode) String() string {
	return proto.EnumName(LoginFaild_ErrorCode_name, int32(x))
}
func (LoginFaild_ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{6, 0} }

type SignUpResponse struct {
	ErrorCode int32   `protobuf:"varint,1,opt,name=errorCode" json:"errorCode,omitempty"`
	Version   float32 `protobuf:"fixed32,2,opt,name=version" json:"version,omitempty"`
}

func (m *SignUpResponse) Reset()                    { *m = SignUpResponse{} }
func (m *SignUpResponse) String() string            { return proto.CompactTextString(m) }
func (*SignUpResponse) ProtoMessage()               {}
func (*SignUpResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SignUpResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *SignUpResponse) GetVersion() float32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type TosChat struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *TosChat) Reset()                    { *m = TosChat{} }
func (m *TosChat) String() string            { return proto.CompactTextString(m) }
func (*TosChat) ProtoMessage()               {}
func (*TosChat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *TosChat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TosChat) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type TocChat struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *TocChat) Reset()                    { *m = TocChat{} }
func (m *TocChat) String() string            { return proto.CompactTextString(m) }
func (*TocChat) ProtoMessage()               {}
func (*TocChat) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *TocChat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TocChat) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Login struct {
	Account  string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Passward string `protobuf:"bytes,2,opt,name=passward" json:"passward,omitempty"`
}

func (m *Login) Reset()                    { *m = Login{} }
func (m *Login) String() string            { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()               {}
func (*Login) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Login) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Login) GetPassward() string {
	if m != nil {
		return m.Passward
	}
	return ""
}

type PlayerBaseInfo struct {
	PlayerID uint32 `protobuf:"varint,1,opt,name=PlayerID" json:"PlayerID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *PlayerBaseInfo) Reset()                    { *m = PlayerBaseInfo{} }
func (m *PlayerBaseInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerBaseInfo) ProtoMessage()               {}
func (*PlayerBaseInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *PlayerBaseInfo) GetPlayerID() uint32 {
	if m != nil {
		return m.PlayerID
	}
	return 0
}

func (m *PlayerBaseInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LoginSuccessfull struct {
	PlayerBaseInfo *PlayerBaseInfo `protobuf:"bytes,1,opt,name=playerBaseInfo" json:"playerBaseInfo,omitempty"`
}

func (m *LoginSuccessfull) Reset()                    { *m = LoginSuccessfull{} }
func (m *LoginSuccessfull) String() string            { return proto.CompactTextString(m) }
func (*LoginSuccessfull) ProtoMessage()               {}
func (*LoginSuccessfull) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *LoginSuccessfull) GetPlayerBaseInfo() *PlayerBaseInfo {
	if m != nil {
		return m.PlayerBaseInfo
	}
	return nil
}

type LoginFaild struct {
	Code LoginFaild_ErrorCode `protobuf:"varint,1,opt,name=code,enum=msg.LoginFaild_ErrorCode" json:"code,omitempty"`
}

func (m *LoginFaild) Reset()                    { *m = LoginFaild{} }
func (m *LoginFaild) String() string            { return proto.CompactTextString(m) }
func (*LoginFaild) ProtoMessage()               {}
func (*LoginFaild) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *LoginFaild) GetCode() LoginFaild_ErrorCode {
	if m != nil {
		return m.Code
	}
	return LoginFaild_AccountOrPasswardNotMatch
}

func init() {
	proto.RegisterType((*SignUpResponse)(nil), "msg.SignUpResponse")
	proto.RegisterType((*TosChat)(nil), "msg.TosChat")
	proto.RegisterType((*TocChat)(nil), "msg.TocChat")
	proto.RegisterType((*Login)(nil), "msg.Login")
	proto.RegisterType((*PlayerBaseInfo)(nil), "msg.PlayerBaseInfo")
	proto.RegisterType((*LoginSuccessfull)(nil), "msg.LoginSuccessfull")
	proto.RegisterType((*LoginFaild)(nil), "msg.LoginFaild")
	proto.RegisterEnum("msg.LoginFaild_ErrorCode", LoginFaild_ErrorCode_name, LoginFaild_ErrorCode_value)
}

func init() { proto.RegisterFile("login.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0xdf, 0xf2, 0x82, 0xd8, 0x41, 0x6b, 0xb3, 0x5e, 0xc0, 0x68, 0x42, 0x7a, 0xe2, 0x62,
	0x0f, 0x78, 0xf0, 0x60, 0x4c, 0x44, 0xd0, 0xd8, 0x44, 0xfe, 0x64, 0xd1, 0x0f, 0xb0, 0x6e, 0x97,
	0xd2, 0xa4, 0xec, 0x34, 0xbb, 0x0b, 0xc6, 0xaf, 0xe0, 0xa7, 0x36, 0xdd, 0x52, 0x08, 0x1e, 0xbd,
	0xcd, 0x33, 0x7d, 0x9e, 0x5f, 0x67, 0x3a, 0x85, 0x56, 0x86, 0x49, 0x2a, 0xc3, 0x5c, 0xa1, 0x41,
	0xf2, 0x7f, 0xa5, 0x93, 0xe0, 0x05, 0xbc, 0x79, 0x9a, 0xc8, 0xf7, 0x9c, 0x0a, 0x9d, 0xa3, 0xd4,
	0x82, 0x5c, 0x82, 0x2b, 0x94, 0x42, 0x35, 0xc4, 0x58, 0xb4, 0x9d, 0xae, 0xd3, 0x6b, 0xd0, 0x7d,
	0x83, 0xb4, 0xa1, 0xb9, 0x11, 0x4a, 0xa7, 0x28, 0xdb, 0xb5, 0xae, 0xd3, 0xab, 0xd1, 0x4a, 0x06,
	0xb7, 0xd0, 0x7c, 0x43, 0x3d, 0x5c, 0x32, 0x43, 0x08, 0xd4, 0x25, 0x5b, 0x95, 0x69, 0x97, 0xda,
	0xba, 0x08, 0x72, 0x94, 0x46, 0x48, 0x63, 0x83, 0x2e, 0xad, 0x64, 0x19, 0xe4, 0x7f, 0x08, 0xde,
	0x43, 0xe3, 0xb5, 0xd8, 0xa7, 0xb0, 0x30, 0xce, 0x71, 0x2d, 0xcd, 0x36, 0x59, 0x49, 0x72, 0x01,
	0xc7, 0x39, 0xd3, 0xfa, 0x93, 0xa9, 0x78, 0x9b, 0xde, 0xe9, 0xe0, 0x01, 0xbc, 0x59, 0xc6, 0xbe,
	0x84, 0x7a, 0x64, 0x5a, 0x44, 0x72, 0x81, 0x85, 0xbb, 0xec, 0x44, 0x23, 0x0b, 0x3a, 0xa5, 0x3b,
	0x5d, 0x8c, 0x36, 0x29, 0x46, 0x2b, 0x29, 0xb6, 0x0e, 0xa6, 0xe0, 0xdb, 0x01, 0xe6, 0x6b, 0xce,
	0x85, 0xd6, 0x8b, 0x75, 0x96, 0x91, 0x3b, 0xf0, 0xf2, 0x03, 0xaa, 0x25, 0xb5, 0xfa, 0xe7, 0xe1,
	0x4a, 0x27, 0xe1, 0xe1, 0x0b, 0xe9, 0x2f, 0x6b, 0xf0, 0xed, 0x00, 0x58, 0xe2, 0x33, 0x4b, 0xb3,
	0x98, 0x5c, 0x43, 0x9d, 0x57, 0x57, 0xf0, 0xfa, 0x1d, 0x4b, 0xd8, 0x3f, 0x0e, 0x9f, 0xaa, 0xab,
	0x50, 0x6b, 0x0b, 0xc6, 0xe0, 0xee, 0x5a, 0xe4, 0x0a, 0x3a, 0x83, 0xf2, 0x23, 0x4c, 0xd5, 0x6c,
	0xbb, 0xf2, 0x04, 0xcd, 0x98, 0x19, 0xbe, 0xf4, 0xff, 0x11, 0x1f, 0x4e, 0x06, 0x9c, 0x47, 0xa3,
	0x48, 0x6e, 0x58, 0x96, 0xc6, 0xbe, 0x43, 0xce, 0xa0, 0x65, 0xd9, 0x54, 0xe4, 0x82, 0x19, 0xbf,
	0xf6, 0x71, 0x64, 0x7f, 0x93, 0x9b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0x2f, 0x5d, 0x91,
	0x35, 0x02, 0x00, 0x00,
}
